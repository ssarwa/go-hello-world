on: [push]

env:
  SYSDIG_SECURE_URL: "https://us2.app.sysdig.com"
  REGISTRY_NAME: "azsysdigcr"
  LOCATION: "West Central US"
  CLUSTER_NAME: "azure-cluster"
  CLUSTER_RESOURCE_GROUP: "Sysdig-Azure-RG"
  NAMESPACE: "app-ns"
  IMAGE_PULL_SECRET: "go-hello-world-dockerauth"
  APP_NAME: "go-hello-world"

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout Code
      uses: actions/checkout@master

    - name: Build Docker Image
      run: |
        docker build . --file Dockerfile --tag ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker save ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} -o /tmp/image.tar
        chmod 666 /tmp/image.tar
    
    - name: Scan Image New
      env:
        SECURE_API_TOKEN: ${{ secrets.SYSDIG_SECURE_TOKEN }}
      run: |
        curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
        chmod +x ./sysdig-cli-scanner
        ./sysdig-cli-scanner --apiurl ${{ env.SYSDIG_SECURE_URL }} docker://${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }} --output-json=/tmp/${{ env.APP_NAME }}.json
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: image
        path: /tmp/image.tar

  push:
      runs-on: ubuntu-latest
      needs: [build-and-scan]
      steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create ACR
        id: create-acr
        run: |
          az acr create -n ${{ env.REGISTRY_NAME }} -g ${{ env.CLUSTER_RESOURCE_GROUP }} --location "${{ env.LOCATION }}" --sku Standard --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRY_NAME }} --query username | xargs`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRY_NAME }} --query passwords[0].value | xargs`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRY_NAME }} --query passwords[0].value | xargs`"

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: azsysdigcr.azurecr.io
          username: ${{ steps.create-acr.outputs.acr_username }}
          password: ${{ steps.create-acr.outputs.acr_password }}
    
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: image
          path: /tmp
      
      - name: Load Docker image
        run: |
          docker load --input /tmp/image.tar
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-scan, push]
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: Create namespace
      run: |
        echo ${{ needs.push.outputs.acrPassword }}
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi

    - name: Get ACR Details
      id: acr-details
      run: |
        #ACRResourceID=$(az acr show -n ${{ env.REGISTRY_NAME }} -g ${{ env.CLUSTER_RESOURCE_GROUP }} --query id -o tsv)
        #az aks update -n ${{ env.CLUSTER_NAME }} -g ${{ env.CLUSTER_RESOURCE_GROUP }} --attach-acr $ACRResourceID
        echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRY_NAME }} --query username | xargs`"
        echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRY_NAME }} --query passwords[0].value | xargs`"
        echo "::add-mask::`az acr credential show -n ${{ env.REGISTRY_NAME }} --query passwords[0].value | xargs`"

    - name: Create Image Pull Secret
      uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ steps.acr-details.outputs.acr_username}}
        container-registry-password: ${{ steps.acr-details.outputs.acr_password }}
        secret-name: ${{ env.IMAGE_PULL_SECRET }}
    
    - name: Checkout Code
      uses: actions/checkout@master
    
    - name: Replace Image
      run: |
        sed -i -e 's|BUILT_IMAGE|${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}|g' manifests/deployment.yml
    
    - name: Deploy to Kubernetes cluster
      uses: Azure/k8s-deploy@v3.1
      with:
        namespace: ${{ env.NAMESPACE }}
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.IMAGE_PULL_SECRET }}