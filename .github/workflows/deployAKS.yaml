name: deployAKS
"on":
    push:
        branches:
            - main
    workflow_dispatch: {}
env:
    ACR_RESOURCE_GROUP: Sysdig-Azure-RG
    AZURE_CONTAINER_REGISTRY: azsysdigcr
    SYSDIG_SECURE_URL: "https://us2.app.sysdig.com"
    CLUSTER_NAME: azure-cluster
    CLUSTER_RESOURCE_GROUP: Sysdig-Azure-RG
    CONTAINER_NAME: goimage
    DEPLOYMENT_MANIFEST_PATH: |
        ./manifests/deployment.yml
        ./manifests/service.yml
jobs:
    buildImage:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              name: Checkout Code
            
            - uses: azure/login@v1.4.3
              name: Azure login
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            
            - name: Build image to ACR
              run: |
                docker build . --file Dockerfile --tag ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}

            - name: Setup cache
              uses: actions/cache@v3
              with:
                path: cache
                key: ${{ runner.os }}-cache-${{ hashFiles('**/sysdig-cli-scanner', '**/latest_version.txt', '**/db/main.db.meta.json', '**/scanner-cache/inlineScannerCache.db') }}
                restore-keys: ${{ runner.os }}-cache-

            - name: Download sysdig-cli-scanner if needed
              run:  |
                curl -sLO https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt
                mkdir -p ${GITHUB_WORKSPACE}/cache/db/
                if [ ! -f ${GITHUB_WORKSPACE}/cache/latest_version.txt ] || [ $(cat ./latest_version.txt) != $(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt) ]; then
                cp ./latest_version.txt ${GITHUB_WORKSPACE}/cache/latest_version.txt
                curl -sL -o ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
                chmod +x ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner
                else
                echo "sysdig-cli-scanner latest version already downloaded"
                fi
                
            - name: Scan the image using sysdig-cli-scanner
              env:
                SECURE_API_TOKEN: ${{ secrets.SYSDIG_SECURE_TOKEN }}
              run: |
                ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner \
                --apiurl ${{ env.SYSDIG_SECURE_URL }} \
                docker://${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} \
                --console-log \
                --dbpath=${GITHUB_WORKSPACE}/cache/db/ \
                --cachepath=${GITHUB_WORKSPACE}/cache/scanner-cache/

            - name: Push the image if scan is Successful
              run: |
                docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
    deploy:
        permissions:
            actions: read
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        needs:
            - buildImage
        steps:
            - uses: actions/checkout@v3
            - uses: azure/login@v1.4.3
              name: Azure login
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            - uses: azure/aks-set-context@v3
              name: Get K8s context
              with:
                cluster-name: ${{ env.CLUSTER_NAME }}
                resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
            - uses: Azure/k8s-deploy@v4
              name: Deploys application
              with:
                action: deploy
                images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
                manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
                namespace: app-ns
